<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨枫个人博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-03T07:14:52.298Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>墨枫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>六、Dubbo 框架</title>
    <link href="http://example.com/2023/01/03/%E5%85%AD%E3%80%81Dubbo-%E6%A1%86%E6%9E%B6/"/>
    <id>http://example.com/2023/01/03/%E5%85%AD%E3%80%81Dubbo-%E6%A1%86%E6%9E%B6/</id>
    <published>2023-01-03T07:11:51.910Z</published>
    <updated>2023-01-03T07:14:52.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、Dubbo-框架"><a href="#六、Dubbo-框架" class="headerlink" title="六、Dubbo 框架"></a>六、Dubbo 框架</h1><h2 id="网关业务逻辑"><a href="#网关业务逻辑" class="headerlink" title="网关业务逻辑"></a>网关业务逻辑</h2><p>问题：网关项目比较纯净，没有操作数据库的包、并且还要调用我们之前写过的代码？复制粘贴维护麻烦</p><p>解决：直接请求到其他项目的方法</p><h3 id="如何调用其他项目的方法"><a href="#如何调用其他项目的方法" class="headerlink" title="如何调用其他项目的方法"></a>如何调用其他项目的方法</h3><ol><li>复制代码、依赖和环境</li><li>HTTP 请求（提供一个接口，供其他项目使用）</li><li>RPC</li><li>把公共的代码打包 JAR 包，其他项目引用（客户端 SDK）</li></ol><h3 id="HTTP-请求如何调用？"><a href="#HTTP-请求如何调用？" class="headerlink" title="HTTP 请求如何调用？"></a>HTTP 请求如何调用？</h3><ol><li>提供开发一个接口（地址、请求方法、参数、返回值）</li><li>调用方使用 HTTP Client 之类的代码包去发送 HTTP 请求</li></ol><h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h3><p><strong>作用：像本地方法一样调用远程方法</strong></p><ol><li>对开发者更透明，减少了很多的沟通 成本</li><li>RPC 想远程服务器发送请求时，未必要使用 HTTP 请求，比如还可以用 TCP&#x2F;IP，性能更高（内部服务更适用）</li></ol><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202212272020718.png" alt="image-20221227202039865"></p><h3 id="Dubbo-框架（RPC-实现）"><a href="#Dubbo-框架（RPC-实现）" class="headerlink" title="Dubbo 框架（RPC 实现）"></a>Dubbo 框架（RPC 实现）</h3><p>GRPC、TRPC</p><p>阅读官方文档：<a href="https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/">https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/quick-start/spring-boot/</a></p><p>两种使用方式：</p><ol><li>Spring Boot 代码（注解 + 编程式）：写 Java 接口，服务提供者和消费者都去引用这个接口</li><li>IDL（接口调用语言）：创建一个公共的接口定义文件，服务提供者和消费者都去读取这个文件。优点是跨语言，所有的框架都熟悉。</li></ol><p>底层是 Triple 协议：<a href="https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/">https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/concepts-and-architecture/triple/</a></p><h4 id="示例学习"><a href="#示例学习" class="headerlink" title="示例学习"></a>示例学习</h4><p>zookeeper 注册中心：通过内嵌的方式运行，更方便</p><p>最先启动注册中心，先启动服务提供者，在启动服务消费者</p><h3 id="整合运用"><a href="#整合运用" class="headerlink" title="整合运用"></a>整合运用</h3><ol><li>backend 项目作为服务提供者，提供 3 个方法：<ol><li>实际情况应该是去数据库中查是否已分配给用户</li><li>从数据库中查询模拟接口是否存在，以及请求方法是否匹配（还可以校验请求参数）</li><li>调用成功，接口调用次数 + 1 invokeCount</li></ol></li><li>gateway 项目作为服务调用者，调用这 3 个方法</li></ol><p>整合 Nacos 注册中心：<a href="https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/reference-manual/registry/nacos/">https://cn.dubbo.apache.org/zh/docs3-v2/java-sdk/reference-manual/registry/nacos/</a></p><p>注意：</p><ol><li>服务调用类必须在同一包下，建议是抽象出一个公共项目（放接口、实体类等）</li><li>设置注解（比如启动类的 EnableDubbo、接口实现类和 Bean 引用的注解）</li><li>添加配置</li><li>服务调用项目和提供者项目尽量引入相同的依赖和配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.dubbo/dubbo --&gt;</span></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;dubbo&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">3.1</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.1</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;六、Dubbo-框架&quot;&gt;&lt;a href=&quot;#六、Dubbo-框架&quot; class=&quot;headerlink&quot; title=&quot;六、Dubbo 框架&quot;&gt;&lt;/a&gt;六、Dubbo 框架&lt;/h1&gt;&lt;h2 id=&quot;网关业务逻辑&quot;&gt;&lt;a href=&quot;#网关业务逻辑&quot; class=&quot;</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>三、API 开放平台-接口发布</title>
    <link href="http://example.com/2022/12/22/%E4%B8%89%E3%80%81API%20%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0-%E6%8E%A5%E5%8F%A3%E5%8F%91%E5%B8%83/"/>
    <id>http://example.com/2022/12/22/%E4%B8%89%E3%80%81API%20%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0-%E6%8E%A5%E5%8F%A3%E5%8F%91%E5%B8%83/</id>
    <published>2022-12-22T04:05:34.057Z</published>
    <updated>2022-12-22T04:17:19.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、接口发布-下线-调用"><a href="#三、接口发布-下线-调用" class="headerlink" title="三、接口发布-下线-调用"></a>三、接口发布-下线-调用</h1><ol><li>开发接口发布、下线的功能（管理员）</li><li>前端去浏览接口、查看接口文档、申请签名（注册）</li><li>在线调试（用户）</li><li>统计用户调用接口的次数</li><li>优化系统 - API 网关</li></ol><h2 id="开发接口发布-x2F-下线功能"><a href="#开发接口发布-x2F-下线功能" class="headerlink" title="开发接口发布&#x2F;下线功能"></a>开发接口发布&#x2F;下线功能</h2><p>后台接口：</p><p>发布接口（仅管理员可操作）</p><ol><li>校验该接口是否存在</li><li>判断该接口是否可以调用</li><li>修改接口数据库中的状态字段为 1</li></ol><p>下线接口（仅管理员可操作）</p><ol><li>校验接口是否存在</li><li>修改接口数据库中的状态字段为 0</li></ol><h2 id="查看接口文档"><a href="#查看接口文档" class="headerlink" title="查看接口文档"></a>查看接口文档</h2><p>动态路由，用 url 来传递 id, 加载不同的接口信息</p><h2 id="申请签名"><a href="#申请签名" class="headerlink" title="申请签名"></a>申请签名</h2><p>用户在注册成功时，自动分配 accessKey、secretKey </p><p>扩展点：用户可以申请更换签名</p><h2 id="在线调用"><a href="#在线调用" class="headerlink" title="在线调用"></a>在线调用</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;username&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>先跑通整个接口流程，再去针对不同的请求头或者接口类型来设计界面和表单，给用户更好的体验。（可以参考 swagger、postman、knife4j)</p><h2 id="调用流程"><a href="#调用流程" class="headerlink" title="调用流程"></a>调用流程</h2><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202212041910410.png" alt="image-20221204191022426"></p><p>流程：</p><ol><li>前端将用户输入的请求参数和要测试的接口 id 发给平台后端</li><li>在调用前可以做一些校验</li><li>平台后端去调用模拟接口</li></ol><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>判断该接口是否可以调用时有固定方法名改为根据测试地址来调用</li><li>用户测试接口固定方法名改为根据测试地址来调用</li><li>模拟接口改为从数据库校验 accessKey</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三、接口发布-下线-调用&quot;&gt;&lt;a href=&quot;#三、接口发布-下线-调用&quot; class=&quot;headerlink&quot; title=&quot;三、接口发布-下线-调用&quot;&gt;&lt;/a&gt;三、接口发布-下线-调用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;开发接口发布、下线的功能（管理员）&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>API 开放平台设计</title>
    <link href="http://example.com/2022/12/22/%E4%B8%80%E3%80%81API%20%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/12/22/%E4%B8%80%E3%80%81API%20%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-12-22T04:04:12.627Z</published>
    <updated>2022-12-22T03:54:19.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="API-开放平台"><a href="#API-开放平台" class="headerlink" title="API 开放平台"></a>API 开放平台</h1><h2 id="第一期"><a href="#第一期" class="headerlink" title="第一期"></a>第一期</h2><p>项目背景：</p><ol><li>前端开发需要用到后端接口</li><li>使用现成的系统的功能（<a href="http://api.btstu.cn/%EF%BC%89">http://api.btstu.cn/）</a></li></ol><p>API 接口平台：</p><ol><li>防止攻击（安全性）</li><li>不能随便调用（限制、开通）</li><li><strong>统计调用次数</strong></li><li>计费</li><li>流量保护</li><li>API 接口</li></ol><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>做一个提供 API 接口调用的平台，用户可以注册登录，开通接口调用权限，用户可以使用接口，并且每次调用会进行统计。管理员可以发布接口、下线接口、接入接口，以及可视化接口的调用情况、数据。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li>Ant Design Pro</li><li>React</li><li>Ant Design Procompoments</li><li>Umi</li><li>Umi Request (Axios 的封装)</li></ul><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>Java Spring Boot</li><li>Sring Boot Starter （SDK 开发）</li></ul><h2 id="项目计划"><a href="#项目计划" class="headerlink" title="项目计划"></a>项目计划</h2><h3 id="第一期-—-初始化展示"><a href="#第一期-—-初始化展示" class="headerlink" title="第一期 —- 初始化展示"></a>第一期 —- 初始化展示</h3><p>项目介绍、设计、技术选型</p><p>基础项目搭建</p><p>接口管理</p><p>用户查看接口</p><h3 id="第二期-—-接口调用"><a href="#第二期-—-接口调用" class="headerlink" title="第二期 —- 接口调用"></a>第二期 —- 接口调用</h3><ol><li>继续开发接口管理前端页面</li><li>开发调用这个接口的代码</li><li>保证调用的安全性<strong>（API 签名认证）</strong></li><li>客户端 SDK  的开发</li><li>管理员接口 <strong>发布</strong> 与调用</li><li>接口文档展示、接口在线调用</li></ol><h3 id="第三期-—–-接口计费与保护"><a href="#第三期-—–-接口计费与保护" class="headerlink" title="第三期 —– 接口计费与保护"></a>第三期 —– 接口计费与保护</h3><p>统计用户调用接口次数</p><p>限流</p><p>计费</p><p>日志</p><p>开通</p><h3 id="第四期-—-管理、统计分析"><a href="#第四期-—-管理、统计分析" class="headerlink" title="第四期 —- 管理、统计分析"></a>第四期 —- 管理、统计分析</h3><p>提供可视化平台，用图表的方展示所有接口的调用情况，便于调整业务</p><p><strong>实现预警</strong></p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol><li>管理员可以对接口信息进行增删改查</li><li>用户可以访问前台，查看接口信息</li></ol><h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><h3 id="接口信息表"><a href="#接口信息表" class="headerlink" title="接口信息表"></a>接口信息表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 接口信息表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> mofeng.`interface_info`</span><br><span class="line">(</span><br><span class="line">    `id` <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    `name` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    `description` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">null</span> comment <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">    `url` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口地址&#x27;</span>,</span><br><span class="line">    `requestHeader` text <span class="keyword">null</span> comment <span class="string">&#x27;请求头&#x27;</span>,</span><br><span class="line">    `responseHeader` text <span class="keyword">null</span> comment <span class="string">&#x27;响应头&#x27;</span>,</span><br><span class="line">    `userId` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建人&#x27;</span>,</span><br><span class="line">    `status` <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;接口状态（0 - 关闭， 1 - 开启））&#x27;</span>,</span><br><span class="line">    `<span class="keyword">method</span>` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line">    `createTime` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `updateTime` datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    `isDelete` tinyint <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除(0-未删, 1-已删)&#x27;</span></span><br><span class="line">    ) comment <span class="string">&#x27;接口信息表&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="项目脚手架"><a href="#项目脚手架" class="headerlink" title="项目脚手架"></a>项目脚手架</h2><p>前端：Ant Design Pro 脚手架</p><p>后端：Spring Boot 通用模板</p><h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><p>增删改查、登录（复制、粘贴）</p><p>前端接口调用：oneapi 插件自动生成</p><p>openapi  的规范</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;API-开放平台&quot;&gt;&lt;a href=&quot;#API-开放平台&quot; class=&quot;headerlink&quot; title=&quot;API 开放平台&quot;&gt;&lt;/a&gt;API 开放平台&lt;/h1&gt;&lt;h2 id=&quot;第一期&quot;&gt;&lt;a href=&quot;#第一期&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>API 开放平台四-网关</title>
    <link href="http://example.com/2022/12/22/%E5%9B%9B%E3%80%81API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0-%E7%BD%91%E5%85%B3/"/>
    <id>http://example.com/2022/12/22/%E5%9B%9B%E3%80%81API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0-%E7%BD%91%E5%85%B3/</id>
    <published>2022-12-22T04:04:12.625Z</published>
    <updated>2022-12-22T03:59:14.765Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四、网关"><a href="#四、网关" class="headerlink" title="四、网关"></a>四、网关</h1><ol><li>开发接口调用次数的设计</li><li>优化整个系统的架构（API 网关）<ol><li>网关是什么？</li><li>网关的作用</li><li>网关的应用场景及实现</li><li>结合业务应用网关</li></ol></li></ol><h2 id="接口调用次数统计"><a href="#接口调用次数统计" class="headerlink" title="接口调用次数统计"></a>接口调用次数统计</h2><p>需求：</p><ol><li><strong>用户每次调用接口成功，次数 + 1</strong></li><li>给用户分配或者用户自主申请接口调用次数</li></ol><p>业务流程：</p><ol><li>用户调用接口</li><li>修改数据库，调用次数 + 1</li></ol><p>设计库表：</p><p>哪个用户？哪个接口？</p><p>用户 &#x3D;&gt; 接口 （多对多关系）</p><p>用户调用接口关系表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户调用接口关系表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> user_interface_info</span><br><span class="line">(</span><br><span class="line">    id            <span class="type">bigint</span> auto_increment comment <span class="string">&#x27;id&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    userId        <span class="type">bigint</span>  comment <span class="string">&#x27;调用用户 id&#x27;</span>,</span><br><span class="line">    interfaceInfoId        <span class="type">bigint</span>  comment <span class="string">&#x27;接口 id&#x27;</span>,</span><br><span class="line">    totalNum       <span class="type">int</span>     <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;总调用次数&#x27;</span>,</span><br><span class="line">    leftNum       <span class="type">int</span>     <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;剩余调用次数&#x27;</span>,</span><br><span class="line">    status       <span class="type">int</span>     <span class="keyword">default</span> <span class="number">0</span> comment <span class="string">&#x27;0-正常， 1-禁用&#x27;</span>,</span><br><span class="line">    createTime    datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    updateTime    datetime <span class="keyword">default</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    isDelete      tinyint  <span class="keyword">default</span> <span class="number">0</span>                 <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;是否删除&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户调用接口关系表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>开发基本的增删改查（给管理员用）</li><li>开发用户调用接口次数 + 1 的功能（service）</li></ol><p>问题：</p><p>如果每个接口的方法都写调用次数 + 1， 过于麻烦</p><p>致命问题：接口开发者需要自己去添加统计代码</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20221204192719518.png" alt="image-20221204192719518"></p><p>使用 AOP 切面的优点：独立于接口，在每个接口调用后次数 + 1</p><p>AOP 切面的缺点：只存在单个项目中，如果每个团队都要开发自己的模拟接口，那么都要写一个切面</p><h2 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h2><h3 id="网关的作用"><a href="#网关的作用" class="headerlink" title="网关的作用"></a>网关的作用</h3><ol><li>路由</li><li>负载均衡</li><li>统一鉴权</li><li>跨域</li><li>统一业务处理（缓存）</li><li>访问控制</li><li>发布控制</li><li>流量染色</li><li>接口保护<ol><li>限制请求</li><li>信息脱敏</li><li>降级（熔断）</li><li>限流：学习令牌桶算法、学习漏桶算法，学习一下 RedisLimitHandler</li><li>超时时间</li></ol></li><li>统一日志</li><li>统一文档</li></ol><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>起到转发的作用，比如有接口 A 和接口 B， 网关会记录这些信息，根据用户访问的地址和参数，转发请求到对应的接口（服务器&#x2F;集群）</p><p>&#x2F;a &#x3D;&gt; 接口 A</p><p>&#x2F;b &#x3D;&gt; 接口 B</p><p>Gateway 路由：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</a></p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>在路由的基础上</p><p>&#x2F;c &#x3D;&gt; 服务 A &#x2F; 集群 A （随机转发到其中的某一个机器）</p><p>uri 从固定地址改成 lb:xxxx</p><h3 id="统一处理跨域"><a href="#统一处理跨域" class="headerlink" title="统一处理跨域"></a>统一处理跨域</h3><p>网关统一处理跨域，不用在每个项目里单独处理</p><p>GateWay 处理跨域：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration</a></p><h3 id="发布控制"><a href="#发布控制" class="headerlink" title="发布控制"></a>发布控制</h3><p>灰度发布，比如上线新接口，先给新接口分配 20% 的流量，老接口 80%， 再慢慢调整比例</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-factory</a></p><h3 id="流量染色"><a href="#流量染色" class="headerlink" title="流量染色"></a>流量染色</h3><p>给请求（流量）添加一些标识，一般是设置请求头中，添加新的请求头</p><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory</a></p><p>全局染色：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters</a></p><h3 id="统一接口保护"><a href="#统一接口保护" class="headerlink" title="统一接口保护"></a>统一接口保护</h3><ol><li>限制请求：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersize-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersize-gatewayfilter-factory</a></li><li>信息脱敏：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory</a></li><li>降级（熔断）：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers</a></li><li>限流：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory</a></li><li>超时时间：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration</a></li><li>重试（业务保护）：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory</a></li></ol><h3 id="统一业务处理"><a href="#统一业务处理" class="headerlink" title="统一业务处理"></a>统一业务处理</h3><p>把每个项目中都要做的通用逻辑放到上层（网关），统一处理，比如本项目的次数统计</p><h3 id="统一鉴权"><a href="#统一鉴权" class="headerlink" title="统一鉴权"></a>统一鉴权</h3><p>判断用户是否有权限进行操作，无论访问什么接口，都统一验证权限，避免重复写验证权限操作。</p><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>黑白名单，比如限制 DDOS IP</p><h3 id="统一日志"><a href="#统一日志" class="headerlink" title="统一日志"></a>统一日志</h3><p>统一的请求、响应信息记录</p><h3 id="统一文档"><a href="#统一文档" class="headerlink" title="统一文档"></a>统一文档</h3><p>将下游项目的文档进行聚合，在一个页面统一查看</p><p>可以使用 knife4j : <a href="https://doc.xiaominfo.com/docs/middleware-sources/aggregation-introduction">https://doc.xiaominfo.com/docs/middleware-sources/aggregation-introduction</a></p><h2 id="网关的分类"><a href="#网关的分类" class="headerlink" title="网关的分类"></a>网关的分类</h2><ol><li>全局网关（接入层网关）： 作用是负载均衡、请求日志等，不和业务逻辑绑定</li><li>业务网关（微服务网关）： 存在一些业务逻辑，作用是将请求转发到不同的业务&#x2F;项目&#x2F;接口&#x2F;服务</li></ol><p>参考文章：<a href="https://blog.csdn.net/qq_21040559/article/details/122961395">https://blog.csdn.net/qq_21040559/article/details/122961395</a></p><h2 id="实现网关"><a href="#实现网关" class="headerlink" title="实现网关"></a>实现网关</h2><ol><li>Nginx （全局网关）、Kong 网关 （API 网关， Kong: <a href="https://github.com/Kong/kong">https://github.com/Kong/kong</a>), 编程成本相对高点</li><li>Spring Cloud GateWay (取代了 Zuul ) , 性能高、可以用 Java 代码来写逻辑，适合学习</li></ol><p>网关的技术选型：<a href="https://zhuanlan.zhihu.com/p/500587132">https://zhuanlan.zhihu.com/p/500587132</a></p><h2 id="Spring-Cloud-GateWay-用法"><a href="#Spring-Cloud-GateWay-用法" class="headerlink" title="Spring Cloud GateWay 用法"></a>Spring Cloud GateWay 用法</h2><p>官网：<a href="https://spring.io/projects/spring-cloud-gateway/">https://spring.io/projects/spring-cloud-gateway/</a></p><p>官方文档：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/</a></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>路由（根据什么条件，转发到哪里去）</p><p>断言：一组规则、条件， 用来确定如何转发路由</p><p>过滤器： 对请求进行一系列的处理， 比如添加请求头、添加请求参数</p><p>请求流程：</p><ol><li>客户端发起请求</li><li>Handler Mapping: 根据断言，将请求转发到对应的路由</li><li>Web Handler： 处理请求（一层层经过过滤器）</li><li>实际调用服务</li></ol><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20221204202459676.png" alt="image-20221204202459676"></p><h3 id="两种配置方式"><a href="#两种配置方式" class="headerlink" title="两种配置方式"></a>两种配置方式</h3><ol><li>配置式（方便、规范）<ol><li>简化版</li><li>全称版</li></ol></li><li>编程式（灵活、相对麻烦）</li></ol><h3 id="开启日志"><a href="#开启日志" class="headerlink" title="开启日志"></a>开启日志</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org:</span></span><br><span class="line">      <span class="attr">springframework:</span></span><br><span class="line">        <span class="attr">cloud:</span></span><br><span class="line">          <span class="attr">gateway:</span> <span class="string">trace</span></span><br></pre></td></tr></table></figure><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><ol><li>After 在 xx 时间之后</li><li>Before 在 xx 时间之前</li><li>Between 在 xx 时间之间</li><li>请求类别</li><li>请求头（包含 cookie）</li><li>查询参数</li><li>客户端地址</li><li><strong>权重</strong></li></ol><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>基本功能：对请求头、请求参数、响应头的增删改查</p><ol><li>添加请求头</li><li>添加请求参数</li><li>添加响应头</li><li>降级</li><li>限流</li><li>重试</li></ol><p>引入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-circuitbreaker-reactor-resilience4j&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;四、网关&quot;&gt;&lt;a href=&quot;#四、网关&quot; class=&quot;headerlink&quot; title=&quot;四、网关&quot;&gt;&lt;/a&gt;四、网关&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;开发接口调用次数的设计&lt;/li&gt;
&lt;li&gt;优化整个系统的架构（API 网关）&lt;ol&gt;
&lt;li&gt;网关是什么？&lt;/l</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>二、API 开放平台-模拟接口</title>
    <link href="http://example.com/2022/12/22/%E4%BA%8C%E3%80%81API%20%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0-%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2022/12/22/%E4%BA%8C%E3%80%81API%20%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0-%E6%A8%A1%E6%8B%9F%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-12-22T04:04:12.619Z</published>
    <updated>2022-12-22T04:01:48.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、API-开放平台-模拟接口"><a href="#二、API-开放平台-模拟接口" class="headerlink" title="二、API 开放平台-模拟接口"></a>二、API 开放平台-模拟接口</h1><h2 id="模拟接口项目-mofeng-interface"><a href="#模拟接口项目-mofeng-interface" class="headerlink" title="模拟接口项目 mofeng-interface"></a>模拟接口项目 mofeng-interface</h2><p>提供三个模拟接口</p><ol><li>GET 接口</li><li>POST 接口（URL 传参）</li><li>POST 接口 （Restful)</li></ol><h3 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h3><p>几种 HTTP 调用方式：</p><ol><li>HttpClient</li><li>RestTemplate</li><li>第三方库（OKHTTP、Hutool)</li></ol><p>Hutool:<a href="https://hutool.cn/docs/#/">https://hutool.cn/docs/#/</a></p><p>Http 工具类：<a href="https://hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil">https://hutool.cn/docs/#/http/Http%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%B7%A5%E5%85%B7%E7%B1%BB-HttpUtil</a></p><h3 id="API-签名认证"><a href="#API-签名认证" class="headerlink" title="API 签名认证"></a>API 签名认证</h3><p>本质：</p><ol><li>签名签发</li><li>使用签名（校验签名）</li></ol><p>为什么需要签名认证？</p><p>保证安全性，防止恶意调用</p><h3 id="如何实现-API-签名认证呢？"><a href="#如何实现-API-签名认证呢？" class="headerlink" title="如何实现 API 签名认证呢？"></a>如何实现 API 签名认证呢？</h3><p>通过 http request header 头传递参数</p><ul><li><p>参数1： accessKey 调用的标识 userA, userB (复杂、无序、无规律)</p></li><li><p>参数2： secretKey 密钥 （复杂、无序、无规律），<strong>该参数不能放在请求头中</strong></p><p>类似于用户名和密码，区别：accessKey、 secretKey 是无状态的</p><p>密钥一般不用在服务器之间的传递，因为在传递过程中可能被拦截</p></li><li><p>参数3： 用户请求参数</p></li><li><p>参数4： sign</p></li><li><p>参数5：加 none 随机数， 只能用一次（服务端要保存用过的随机数）</p></li><li><p>参数6： 加 timestamp 时间戳， 校验时间戳是否过期</p></li></ul><p>加密方式：对称加密、非对称加密、md5 签名（不可解密）</p><p>用户参数 + 密钥 &#x3D;&gt; <strong>签名生成算法(MD5、Hmac、Sha1)</strong> &#x3D;&gt; 不可解密的值</p><p>如：abc + abcdefgh &#x3D;&gt; sfasfafffsfsa</p><p>如何验证签名？</p><p><strong>服务端用一模一样的参数和算法去生成签名，只要和用户传的一致，就表示一致。</strong></p><p>如果防止重放？</p><p><strong>服务端要保存用过的随机数</strong></p><p><strong>API 签名认证是一个很灵活的设计，具体要有哪个参数、参数名如何需要根据场景来设计。比如： userId、 appId、version、固定值等</strong></p><h2 id="开发一个简单易用的-SDK"><a href="#开发一个简单易用的-SDK" class="headerlink" title="开发一个简单易用的 SDK"></a>开发一个简单易用的 SDK</h2><p>理想状态下：开发者只需要关心调用哪些接口、传递哪些参数、就跟调用自己写的代码一样。</p><p>开发 starter 的好处：开发者引入后，可以直接在 application.yml 中写配置，自动创建客户端</p><p><strong>spring-boot-configuration-processor 的作用是自动生成配置的代码提示</strong></p><h3 id="starter-的开发流程"><a href="#starter-的开发流程" class="headerlink" title="starter 的开发流程"></a>starter 的开发流程</h3><p>初始化，环境依赖（一定要移除 build）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">   &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">   &lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>编写配置类（启动类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 能读取 application 中的配置属性</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;mofeng.client&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MofengClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MofengApiClient <span class="title function_">mofengApiClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MofengApiClient</span>(accessKey, secretKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册配置类</p><p>resources&#x2F;META_INF&#x2F;spring.factories</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># starter</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.mofeng.mofengclientsdk.MofengClientConfig</span><br></pre></td></tr></table></figure><p>mvn install 打包为本地项目</p><p>创建新项目（复用 server 项目）、测试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二、API-开放平台-模拟接口&quot;&gt;&lt;a href=&quot;#二、API-开放平台-模拟接口&quot; class=&quot;headerlink&quot; title=&quot;二、API 开放平台-模拟接口&quot;&gt;&lt;/a&gt;二、API 开放平台-模拟接口&lt;/h1&gt;&lt;h2 id=&quot;模拟接口项目-mofeng</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>创建 starter 步骤</title>
    <link href="http://example.com/2022/12/22/%E5%88%9B%E5%BB%BAstarter%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2022/12/22/%E5%88%9B%E5%BB%BAstarter%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-12-22T04:04:12.616Z</published>
    <updated>2022-12-22T03:58:17.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建starter步骤"><a href="#创建starter步骤" class="headerlink" title="创建starter步骤"></a>创建starter步骤</h1><p>1.新建一个 spring boot 初始化项目<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230811084.png" alt="image-20221123081123307"></p><p>2.添加依赖，Lombok, Spring Configuration Processor</p><p>Spring Configuration Processor 的作用是自动生成代码提示<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230812657.png" alt="image-20221123081227014"></p><p>3.修改 pom 文件的版本号，并删除 build<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230816110.png" alt="image-20221123081554107"></p><p>​<img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230817635.png" alt="image-20221123081718280"></p><p>4.删除原本自动创建的主类，新建一个类, 并添加需要用到的依赖</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230823121.png" alt="image-20221123082308530"></p><p>5.在 resources 目录下新建 META-INF 目录，并创建 spring.factories 文件，并指定配置类的目录</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230828618.png" alt="image-20221123082817937"></p><p>6.install 打包构建在本地的仓库</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230831488.png" alt="image-20221123083107829"></p><p>7.复制 groupId, artifactId, version,可以在其他项目中添加为依赖</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230833985.png" alt="image-20221123083345988"></p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230834598.png" alt="image-20221123083425190"></p><p>8.在配置文件当中就可以引用 starter 当中设置的属性</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230836055.png" alt="image-20221123083608433"></p><p>刚才在 starter 配置类中定义的属性</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230838324.png" alt="image-20221123083825791"></p><p>可以引入 starter 当中的类或者属性</p><p><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com//9963/202211230839280.png" alt="image-20221123083950711"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建starter步骤&quot;&gt;&lt;a href=&quot;#创建starter步骤&quot; class=&quot;headerlink&quot; title=&quot;创建starter步骤&quot;&gt;&lt;/a&gt;创建starter步骤&lt;/h1&gt;&lt;p&gt;1.新建一个 spring boot 初始化项目&lt;br&gt;&lt;img s</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>GateWay 转发请求</title>
    <link href="http://example.com/2022/12/22/GateWay-%E8%BD%AC%E5%8F%91%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2022/12/22/GateWay-%E8%BD%AC%E5%8F%91%E8%AF%B7%E6%B1%82/</id>
    <published>2022-12-22T04:04:12.611Z</published>
    <updated>2022-12-22T03:57:33.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、Gateway-转发请求"><a href="#五、Gateway-转发请求" class="headerlink" title="五、Gateway 转发请求"></a>五、Gateway 转发请求</h1><h2 id="使用到的特性"><a href="#使用到的特性" class="headerlink" title="使用到的特性"></a>使用到的特性</h2><ol><li>路由</li><li><del>负载均衡（需要用到注册中心）</del></li><li>统一鉴权</li><li><del>跨域</del></li><li>统一业务处理（缓存）</li><li>访问控制</li><li><del>发布控制</del></li><li>流量染色</li><li><del>接口保护</del><ol><li>限制请求</li><li>信息脱敏</li><li>降级（熔断）</li><li>限流：学习令牌桶算法、学习漏桶算法，学习一下 RedisLimitHandler</li><li>超时时间</li></ol></li><li>统一日志</li><li><del>统一文档</del></li></ol><h2 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h2><ol><li>用户发送请求到 API 网关</li><li>请求日志</li><li>（黑白名单）</li><li>用户鉴权（判断 accessKey, secretKey 是否合法）</li><li>请求的模拟接口是否存在</li><li><strong>请求转发，调用模拟接口</strong></li><li>响应日志</li><li>调用成功，次数 + 1</li><li>调用失败，返回一个规范的错误码</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="1-请求转发"><a href="#1-请求转发" class="headerlink" title="1.请求转发"></a>1.请求转发</h3><p>使用前缀匹配断言：<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-path-route-predicate-factory">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-path-route-predicate-factory</a></p><p>所有路径为： &#x2F;api&#x2F;** 的请求进行转发，转发到 <a href="http://localhost:8123/api/">http://localhost:8123/api/</a>**</p><p>比如请求网关： <a href="http://localhost:8090/api/name/get/?name=mofeng">http://localhost:8090/api/name/get/?name=mofeng</a></p><p>转发到：<a href="http://localhost:8123/api/name/get/?name=mofeng">http://localhost:8123/api/name/get/?name=mofeng</a></p><p>配置文件添加内容， application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">api_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8123</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br></pre></td></tr></table></figure><h3 id="2-编写业务逻辑"><a href="#2-编写业务逻辑" class="headerlink" title="2.编写业务逻辑"></a>2.编写业务逻辑</h3><p>使用了 GlobalFilter （编程式），全局请求拦截处理（类似 AOP）</p><p>因为网关项目没引入 MyBatis 等操作数据库的类库，如果该操作较为复杂，可以有 backend 增删改查项目提供接口，直接调用，不需要重复写逻辑。</p><ul><li>HTTP 请求（HTTPClient、 用 RestTemplate、 Feign）</li><li>RPC（Dubbo)</li></ul><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>预期等模拟接口调用完成，才记录响应日志、统计调用次数</p><p>但现实是 chain.filter 方法立即返回了，知道 filter 过滤器 return 后才调用模拟接口</p><p>原因是：chain.filter 是一个异步操作，理解为前端的 promise</p><p>解决方案：利用 response 装饰者，增强原有 response 的处理能力</p><p>参考博客：<a href="https://blog.csdn.net/qq_19636353/article/details/126759522">https://blog.csdn.net/qq_19636353/article/details/126759522</a></p><p>其他参考：</p><p><a href="https://blog.csdn.net/zx156955/article/details/121670681">https://blog.csdn.net/zx156955/article/details/121670681</a></p><p><a href="https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501">https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501</a></p><p><a href="https://blog.csdn.net/qq_39529562/article/details/108911983">https://blog.csdn.net/qq_39529562/article/details/108911983</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五、Gateway-转发请求&quot;&gt;&lt;a href=&quot;#五、Gateway-转发请求&quot; class=&quot;headerlink&quot; title=&quot;五、Gateway 转发请求&quot;&gt;&lt;/a&gt;五、Gateway 转发请求&lt;/h1&gt;&lt;h2 id=&quot;使用到的特性&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="API 开放平台" scheme="http://example.com/categories/API-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="星球项目" scheme="http://example.com/tags/%E6%98%9F%E7%90%83%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>组队功能设计</title>
    <link href="http://example.com/2022/12/08/%E7%BB%84%E9%98%9F%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/12/08/%E7%BB%84%E9%98%9F%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-12-08T08:06:28.952Z</published>
    <updated>2022-12-08T08:03:03.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组队功能"><a href="#组队功能" class="headerlink" title="组队功能"></a>组队功能</h1><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>需要跟自己一起参加竞赛、做项目、学习，可以发起队伍或者加入别人的队伍</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ol><li><p>用户可以<strong>创建</strong>队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0<br>队长、剩余的人数</p><p>聊天</p><p>公开或私密或加密</p><p>用户最多创建 5 个队伍</p></li><li><p>展示队伍列表，根据名称搜索队伍 P0，信息流中不展示已过期的队伍</p></li><li><p>修改队伍信息  P0~P1</p></li><li><p>用户可以加入队伍（其他人、未满人、未过期），允许加入多个队伍，但是有上限 P0 </p></li><li><p>是否需要队长同意？筛选审批？</p></li><li><p>用户可以退出队伍（如果队长退出，权限转移给第二早加入的用户 – 先来先到）P1</p></li><li><p>队长可以解散队伍 P0</p></li><li><p>分享队伍 &#x3D;&gt; 邀请其他用户加入队伍 P1 </p><p>业务流程：<br>（1）生成分享连接（分享二维码）<br>（2）用户访问链接，可以点击加入</p></li></ol><p></p><h3 id="系统（接口）设计"><a href="#系统（接口）设计" class="headerlink" title="系统（接口）设计"></a>系统（接口）设计</h3><h4 id="1-创建队伍"><a href="#1-创建队伍" class="headerlink" title="1.创建队伍"></a>1.创建队伍</h4><p>用户可以<strong>创建</strong>队伍，设置队伍的人数、队伍名称（标题）、描述、超时时间 P0<br>队长、剩余的人数</p><p>聊天</p><p>公开或私密或加密</p><p>用户最多创建 5 个队伍</p><ol><li>请求参数是否为空</li><li>是否登录，为登录不允许创建</li><li>校验信息<br>a. 队伍人数 &gt; 1 且 &lt;&#x3D; 20<br>b. 队伍标题小于 20<br>c. 描述 &lt;&#x3D; 512<br>d. status 是否公开（int）不传默认为0（公开）<br>e. 如果 status 是加密状态，一定要有密码，且密码 &lt;&#x3D; 32<br>f. 超时时间 &gt; 当前时间<br>g.校验用户最多创建 5 个队伍</li><li>插入队伍信息到队伍表</li><li>插入用户 &#x3D;&gt; 队伍关系到关系表</li></ol><h4 id="2-查询队伍列表"><a href="#2-查询队伍列表" class="headerlink" title="2.查询队伍列表"></a>2.查询队伍列表</h4><p>展示队伍列表，根据名称搜索队伍 P0，信息流中不展示已过期的队伍</p><ol><li>从请求参数中取出队伍名称等查询条件，如果存在则作为查询条件</li><li>不展示已过期的队伍（根据过期时间筛选）</li><li>可以通过某个<strong>关键字</strong>同时对名称和描述查询</li><li><strong>只有管理员才能查看加密还有非公开的队伍</strong></li><li>关联查询已加入队伍的用户信息</li><li><strong>关联查询已加入队伍的用户信息（可能耗费性能，建议用 SQL 实现）</strong></li></ol><p>实现方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询队伍和创建人信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> team t <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> t.userId <span class="operator">=</span> u.id</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 查询队伍和已加入队伍成员的信息</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> team t</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> user_team ut <span class="keyword">on</span> t.id <span class="operator">=</span> ut.teamId</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> ut.userId <span class="operator">=</span> u.id</span><br></pre></td></tr></table></figure><h4 id="3-修改队伍信息"><a href="#3-修改队伍信息" class="headerlink" title="3.修改队伍信息"></a>3.修改队伍信息</h4><ol><li>判断请求参数是否为空</li><li>查询队伍是否存在</li><li>只有管理员或者队伍的创建者可以修改</li><li>如果传入的新值和老值一致，则不需要 update （降低数据库使用次数）</li><li><strong>如果队伍状态为加密，修改时必须带密码</strong></li><li>更新队伍信息</li></ol><h4 id="4-用户可以加入队伍"><a href="#4-用户可以加入队伍" class="headerlink" title="4.用户可以加入队伍"></a>4.用户可以加入队伍</h4><p>其他人、队伍未满、未过期、允许加入过个队伍，但是有上线 P0</p><ol><li>用户最多加入 5 个队伍</li><li>队伍必须存在，只能加入未满员、未过期的队伍</li><li>不能加入自己的队伍，不能重复加入已加入的队伍（幂等性）</li><li>禁止加入私有的队伍</li><li>如果加入的队伍是加密的，需要匹配密码</li><li>修改队伍信息，补充人数</li><li>新增队伍-用户关联信息</li></ol><p><strong>注意，加上事务注解 @Trancational</strong></p><h4 id="5-用户退出队伍"><a href="#5-用户退出队伍" class="headerlink" title="5.用户退出队伍"></a>5.用户退出队伍</h4><p>请求参数：队伍 id</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验我是否已加入队伍</li><li>如果队伍<ol><li>只剩下一人，解散队伍</li><li>如果是队长退出，权限转移给第二个人（根据 JoinTime)</li><li>非队长，自己退出队伍，队伍人数 -1</li></ol></li></ol><h4 id="6-队长解散队伍"><a href="#6-队长解散队伍" class="headerlink" title="6.队长解散队伍"></a>6.队长解散队伍</h4><p>请求参数：队伍 id</p><ol><li>校验请求参数</li><li>校验队伍是否存在</li><li>校验是否为队长</li><li>移除所有加入队伍的关联信息</li><li>删除队伍</li></ol><p><strong>注意：一定要加上事务注解！</strong></p><h4 id="7-获取当前用户已加入的队伍"><a href="#7-获取当前用户已加入的队伍" class="headerlink" title="7.获取当前用户已加入的队伍"></a>7.获取当前用户已加入的队伍</h4><h4 id="8-获取当前用户创建的队伍"><a href="#8-获取当前用户创建的队伍" class="headerlink" title="8.获取当前用户创建的队伍"></a>8.获取当前用户创建的队伍</h4><p>复用 listTeam 方法，只新增查询条件，不做修改（开闭原则）</p><h3 id="使用事务注解"><a href="#使用事务注解" class="headerlink" title="使用事务注解"></a>使用事务注解</h3><p>@Trancational(rollbackFor &#x3D; Exception.class)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;组队功能&quot;&gt;&lt;a href=&quot;#组队功能&quot; class=&quot;headerlink&quot; title=&quot;组队功能&quot;&gt;&lt;/a&gt;组队功能&lt;/h1&gt;&lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>数据库表设计</title>
    <link href="http://example.com/2022/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/12/08/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-12-08T08:06:28.949Z</published>
    <updated>2022-12-08T08:01:55.563Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><h4 id="队伍表-team"><a href="#队伍表-team" class="headerlink" title="队伍表 team"></a>队伍表 team</h4><p>字段：</p><ul><li>id 主键 bigint （最简单、连续，放 URL 上比较简短，但缺点是爬虫）</li><li>name 队伍名称</li><li>decription 描述</li><li>maxNum 最大人数</li><li>expireTime 过期时间</li><li>userId 创建人</li><li>status 0 - 公开， 1- 私密， 2 - 加密</li><li>password 队伍密码</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><h4 id="用户-队伍表-user-team"><a href="#用户-队伍表-user-team" class="headerlink" title="用户-队伍表 user_team"></a>用户-队伍表 user_team</h4><p>关系：</p><ol><li>用户加入了哪些队伍？</li><li>队伍有哪些用户？</li></ol><p>两种实现方式：</p><ol><li>建立用户-队伍关系表 teamId userId （便于修改，查询性能高一点，不用全表遍历）</li><li>用户表补充已加入的队伍字段，队伍表补充已加入的用户字段（便于查询，不用写多对多连表查询代码，可以直接根据队伍查用户、根据用户查队伍）</li></ol><p>字段：</p><ul><li>id 主键</li><li>userId 用户 id</li><li>teamId 队伍 id</li><li>joinTime 加入时间</li><li>createTime 创建时间</li><li>updateTime 更新时间</li><li>isDelete 是否删除</li></ul><h3 id="为什么需要请求参数包装类？"><a href="#为什么需要请求参数包装类？" class="headerlink" title="为什么需要请求参数包装类？"></a>为什么需要请求参数包装类？</h3><ol><li>请求参数名称 &#x2F; 类型和实体类不一样</li><li>有一些参数用不到，如果要自动生成接口文档，会增加理解成本（参数太多，冗余）</li><li>对个实体类映射到同一个对象</li></ol><h3 id="为什么需要包装类？"><a href="#为什么需要包装类？" class="headerlink" title="为什么需要包装类？"></a>为什么需要包装类？</h3><ol><li>存在有些字段需要隐藏，不能返回给前端，如用户密码</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;数据库表设计&quot;&gt;&lt;a href=&quot;#数据库表设计&quot; class=&quot;headerlink&quot; title=&quot;数据库表设计&quot;&gt;&lt;/a&gt;数据库表设计&lt;/h3&gt;&lt;h4 id=&quot;队伍表-team&quot;&gt;&lt;a href=&quot;#队伍表-team&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="数据库" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>定时任务实现-Redisson实现分布式锁</title>
    <link href="http://example.com/2022/12/08/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0-Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://example.com/2022/12/08/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%AE%9E%E7%8E%B0-Redisson%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2022-12-08T08:06:28.947Z</published>
    <updated>2022-12-08T08:00:14.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定时任务实现-Redisson实现分布式锁"><a href="#定时任务实现-Redisson实现分布式锁" class="headerlink" title="定时任务实现-Redisson实现分布式锁"></a>定时任务实现-Redisson实现分布式锁</h1><p>主要内容（后端）：</p><ol><li>分布式定时任务执行控制</li><li>锁的概念</li><li>分布式锁概念和常见问题</li><li>分布式锁实践</li></ol><h2 id="定时任务实现"><a href="#定时任务实现" class="headerlink" title="定时任务实现"></a>定时任务实现</h2><ol><li>Spring Scheduler (spring boot 默认整合了，推荐使用这种方式)</li><li>Quartz （独立于 Spring 存在的定时任务框架）</li><li>XXL-Job 之类的分布式任务调度平台（界面 + SDK）</li></ol><p>采用第一种方式：</p><ol><li>主类开启 @EnableScheduling</li><li>给要定时执行的方法添加 @Scheduling , 指定 cron 表达式或者执行频率</li></ol><p><strong>cron 表达式 用现成的工具即可：</strong><br><a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a><br><a href="https://www.matools.com/crontab/">https://www.matools.com/crontab/</a></p><h2 id="控制定时任务的执行"><a href="#控制定时任务的执行" class="headerlink" title="控制定时任务的执行"></a>控制定时任务的执行</h2><p>要控制定时任务在同一时间只有 1 台服务器能执行</p><p>原因：</p><ol><li>浪费资源</li><li>脏数据，比如重复插入</li></ol><p>如何做？</p><p>方案种类：</p><ol><li>分离定时任务程序和主程序，只在 1 个服务器运行定时任务，成本太大</li><li>写死配置，每个服务器都执行定时任务，但是只有 ip 符合配置的服务器才真正执行业务逻辑，其他的直接返回。成本最低；但是我们的 ip 可能不是固定的</li><li>动态配置，配置是可以轻松的、很方便地更新（代码无需重启），但是只有 ip 符合配置的服务器才真正执行业务逻辑。<ul><li>数据库</li><li>Redis</li><li>配置中心（Nacos、 Apollo、 Spring Cloud Config）</li></ul></li></ol><p>问题：服务器多了， ip 不可控还是很麻烦，还需要人工修改</p><ol start="4"><li><p>分布式锁，只有抢到锁的服务器才能执行业务逻辑。<br>缺点：增加成本；<br>优点：不用手动配置，多少服务器都一样</p><p><strong>注意：只要是单机，就会存在单点故障</strong></p></li></ol><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>有限资源的情况下，控制同一时间（段）只有某些线程（用户 &#x2F;  服务器）能访问资源</p><p>Java 实现锁：sychronized 关键字、并发包的类</p><p>存在的问题：只对单个 JVM 有效</p><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="使用分布式锁的原因："><a href="#使用分布式锁的原因：" class="headerlink" title="使用分布式锁的原因："></a>使用分布式锁的原因：</h3><ol><li>有限资源的情况下，控制同一时间（段）只有某些线程（用户 &#x2F;  服务器）能访问资源</li><li>Java 实现锁：sychronized 关键字、并发包的类</li></ol><h3 id="分布式锁的关键"><a href="#分布式锁的关键" class="headerlink" title="分布式锁的关键"></a>分布式锁的关键</h3><h4 id="抢锁机制"><a href="#抢锁机制" class="headerlink" title="抢锁机制"></a>抢锁机制</h4><p>怎么保证同一时间只有 1 台服务器能抢到锁？</p><p><strong>核心思想：</strong>先来的人先把数据改成自己的标识（服务器 ip），后来的人发现标识已存在，就抢锁失败，继续等待</p><p>等待先来的人执行方法结束，把标识清空，其他人继续抢锁</p><p>MYSQL 数据库：select for update 行级锁（最简单），或者用乐观锁</p><p>Redis 实现：内存数据库，读写速度快。支持 setnx、 lua 脚本，比较方便我们实现分布式锁</p><p>setnx: set if not exists 如果不存在，则设置；只有设置成功才返回 true ，否则返回 false</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1）用锁要释放</p><p>2）锁一定要加过期时间</p><p>3）如果方法执行时间过长，锁会提前过期</p><p>锁提前过期会导致的问题：</p><ol><li>连锁反应：释放掉别人的锁</li><li>仍然存在多个方法同时执行的情况</li></ol><p>解决方案：续期</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">end</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(!end)&#123;</span><br><span class="line">        <span class="comment">//续期</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">end = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>4)释放锁的时候，有可能先判断出自己的锁，但这时锁过期了，最后也可能释放别人的锁</p><p>解决方案：Redis + lua 脚本保证操作原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原子操作</span></span><br><span class="line"><span class="keyword">if</span>(get lock == A)&#123;</span><br><span class="line">    <span class="comment">// set lock B</span></span><br><span class="line">    del lock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5)Redis 如果是集群（不是只有一个 Redis），如果分布式锁的数据不同步怎么办？</p><p>解决方案：<a href="https://blog.csdn.net/feiying0canglang/article/details/113258494">https://blog.csdn.net/feiying0canglang/article/details/113258494</a></p><h3 id="Redisson-实现分布式锁"><a href="#Redisson-实现分布式锁" class="headerlink" title="Redisson 实现分布式锁"></a>Redisson 实现分布式锁</h3><p>Redisson 是一个 Java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis（继承了和 Java 相同的集合类）</strong></p><p>关键词：Java Redis 客户端，分布式数据结构，实现了很多 Java 里支持的集合</p><h4 id="两种引用方式"><a href="#两种引用方式" class="headerlink" title="两种引用方式"></a>两种引用方式</h4><ol><li>spring boot starter 引入（不推荐，因为版本迭代太快，容易冲突）：<br><a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li><li>直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></li></ol><h4 id="使用Redisson"><a href="#使用Redisson" class="headerlink" title="使用Redisson"></a>使用Redisson</h4><p>示例代码，创建分布式列表、Map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    list 数据存在本地 JVM   内存中</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;list:&quot;</span> + list.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//    数据存在 Redis 内存中</span></span><br><span class="line">RList&lt;Object&gt; rList = redissonClient.getList(<span class="string">&quot;test-list&quot;</span>);</span><br><span class="line">rList.add(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;RList:&quot;</span> + rList.get(<span class="number">0</span>));</span><br><span class="line"><span class="comment">//rList.remove(0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    map</span></span><br><span class="line">RMap&lt;Object, Object&gt; map = redissonClient.getMap(<span class="string">&quot;test-map&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;yupi&quot;</span>, <span class="number">10</span>);</span><br><span class="line">map.get(<span class="string">&quot;yupi&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="分布式锁保证定时任务不重复执行"><a href="#分布式锁保证定时任务不重复执行" class="headerlink" title="分布式锁保证定时任务不重复执行"></a>分布式锁保证定时任务不重复执行</h4><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testWatchDog</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;yupao:precachejob:docache:lock&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//只有一个线程获取到锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock(<span class="number">0</span>, -<span class="number">1</span>, TimeUnit.MILLISECONDS))&#123;</span><br><span class="line"><span class="comment">// TODO 实际要执行的方法</span></span><br><span class="line">            dosomething();</span><br><span class="line">            System.out.println(<span class="string">&quot;getLock:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//    只能释放自己的锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock.isHeldByCurrentThread())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unLock:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>waitTime 设置为 0，只抢一次，抢不到就放弃</li><li>主要释放锁要写在 finally 语句块中，保证最后一定释放锁</li></ol><h4 id="Redisson-看门狗机制"><a href="#Redisson-看门狗机制" class="headerlink" title="Redisson 看门狗机制"></a>Redisson 看门狗机制</h4><p>Redisson 中提供的续期机制</p><p>开一个监听线程，如果方法还没执行完，就帮你重置 Redis 锁的过期时间</p><p><strong>原理：</strong></p><ol><li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（续期到 30 秒）</li><li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li></ol><p>详情参考文档：<a href="https://blog.csdn.net/qq_26222859/article/details/79645203">https://blog.csdn.net/qq_26222859/article/details/79645203</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定时任务实现-Redisson实现分布式锁&quot;&gt;&lt;a href=&quot;#定时任务实现-Redisson实现分布式锁&quot; class=&quot;headerlink&quot; title=&quot;定时任务实现-Redisson实现分布式锁&quot;&gt;&lt;/a&gt;定时任务实现-Redisson实现分布式锁&lt;/</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="定时任务" scheme="http://example.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
    <category term="分布式" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis 缓存实现-定时任务</title>
    <link href="http://example.com/2022/12/08/%E7%AC%AC%E4%B8%83%E9%9B%86-Redis%20%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2022/12/08/%E7%AC%AC%E4%B8%83%E9%9B%86-Redis%20%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2022-12-08T08:06:28.942Z</published>
    <updated>2022-12-08T08:47:42.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="7、Redis-缓存实现-定时任务"><a href="#7、Redis-缓存实现-定时任务" class="headerlink" title="7、Redis 缓存实现-定时任务"></a>7、Redis 缓存实现-定时任务</h1><p>主要内容（后端）：<br>1.缓存和分布式缓存讲解<br>2.Redis介绍(5种数据结构等)<br>3.Java操作Redis的方法(4种方法+对比分析)<br>4.Java Redis Template序列化（包含源码追踪）<br>5.首页缓存开发与注意事项<br>6.缓存预热设计与实现<br>7.定时任务介绍和实现</p><h2 id="数据查询慢怎么办？"><a href="#数据查询慢怎么办？" class="headerlink" title="数据查询慢怎么办？"></a>数据查询慢怎么办？</h2><ul><li><p>用缓存：提前把数据取出来保存好（通过保存到读写更快的介质，比如内存）</p></li><li><p>用定时任务：预加载缓存，定时更新缓存</p></li></ul><p>思考：多个机器要执行同一个任务吗？</p><p>可以用用分布式锁解决：控制同一时间只有一台机器去执行定时任务，其他机器不用重复执行了</p><h2 id="缓存分类"><a href="#缓存分类" class="headerlink" title="缓存分类"></a>缓存分类</h2><p>分布式缓存：</p><ul><li>Redis（分布式缓存）</li><li>mencached(分布式)</li><li>Etcd （云原生架构的一个分布式存储，<strong>存储配置</strong>，扩容能力）</li></ul><p>单机缓存：</p><ul><li>ehcache</li><li>Java 内存集合，如 HashMap</li><li>Caffeine （Java 内存缓存性能之王，高性能）</li><li>Google Guava</li></ul><h2 id="Redis-缓存实现"><a href="#Redis-缓存实现" class="headerlink" title="Redis 缓存实现"></a>Redis 缓存实现</h2><p>NoSQL 数据库</p><p>key-value 存储系统（区别于 MYSQL 它存储的是键值对）</p><h3 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h3><p>基本数据结构：</p><ul><li>String 字符串类型：name:”mofeng”</li><li>List 列表：names:[“mofeng”,”dogmofeng”,”lu”]</li><li>Set 集合：names:[“mofeng”,”lu”] (值不能重复)</li><li>Hash 哈希：nameAge:{“mofeng”:1,”dogLu”:2}</li><li>Zset 集合：names[mofeng -9, doglu -12] (适合排行榜)</li></ul><p>高级：</p><ul><li>bloomfilter(布隆过滤器，主要从大量的数据中快速过滤值，比如邮件黑名单拦截)</li><li>geo(计算地理位置)</li><li>hyperloglog(pv&#x2F;uv)</li><li>pub&#x2F;sub(发布订阅，类以消息队列)</li><li>BitMap(1001010101010101010101010101)</li></ul><h3 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h3><p>为了防止写入 Redis 的数据乱码、浪费空间等，可以自定义序列化器，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.yupao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-操作-Redis"><a href="#Java-操作-Redis" class="headerlink" title="Java 操作 Redis"></a>Java 操作 Redis</h3><p><strong>Spring Data Redis （推荐）</strong></p><p>地址：<a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis">https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis</a></p><p>Spring Data：通用的数据访问框架，定义了一组 <strong>增删改查</strong>的接口</p><p>还可以操作：mysql、Redis、jpa</p><p>使用方式如下：</p><p>1）引入 Spring Data Redis 依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.6</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2）配置 Redis 地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h4><p>独立与 Spring 操作 Redis 的 Java 客户端</p><p>要配合 Jedis Pool 使用</p><h4 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h4><p><strong>高阶</strong>的操作 Redis 的 Java 客户端</p><p>异步、连接池</p><h4 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h4><p>分布式操作 Redis 的 Java 客户端，像使用本地集合一样操作 Redis （分布式 Redis 数据网络）</p><h4 id="几种库对比"><a href="#几种库对比" class="headerlink" title="几种库对比"></a>几种库对比</h4><ol><li>如果项目用的是 Spring，并且没有过多的定制化要求，可以用 Spring Data Redis，最方便</li><li>如果项目用的不是 Spring，并且追求简单，并且没有过高的性能要求，可以 Jedis + Jedis Pool</li><li>如果项目用的不是 Spring，并且追求高性能、高定制化，可以用 Lettuce ，支持异步、连接池</li><li>如果是分布式项目，需要用到一些分布式的特性（比如分布式锁、分布式集合），推荐使用 Redisson</li></ol><h3 id="设计缓存-key"><a href="#设计缓存-key" class="headerlink" title="设计缓存 key"></a>设计缓存 key</h3><p>关键点：不同用户看到的数据不同</p><p>建议格式：</p><p>systemId:moduleld:fuc:options (防止其他系统的冲突)</p><p>比如：yupao:user:recommend:userId</p><p><strong>注意：Redis 内存不能无限增加，一定要设置过期时间！！！</strong></p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>问题：即使使用了缓存，第一个用户访问还是很慢</p><p>缓存预热的优点：</p><ol><li>解决第一个用户访问很慢，让用户始终快速访问</li><li>在一定程度上保护数据库</li></ol><p>缺点：</p><ol><li>增加开发成本（额外的开发、设计等）</li><li>预热的时机和时间错了，缓存的数据不对或者是未更新的数据</li><li>需要占用额外空间</li></ol><h3 id="怎么缓存预热"><a href="#怎么缓存预热" class="headerlink" title="怎么缓存预热"></a>怎么缓存预热</h3><ol><li>定时任务</li><li>手动触发</li></ol><h3 id="实现缓存预热"><a href="#实现缓存预热" class="headerlink" title="实现缓存预热"></a>实现缓存预热</h3><p>用定时任务，每天刷新所有用户的推荐列表</p><p>注意点：</p><ol><li>缓存预热的意义（新增少、总用户多）</li><li>缓存的空间不能太大，要预留给其他缓存空间</li><li>缓存数据的周期（此处为每天）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;7、Redis-缓存实现-定时任务&quot;&gt;&lt;a href=&quot;#7、Redis-缓存实现-定时任务&quot; class=&quot;headerlink&quot; title=&quot;7、Redis 缓存实现-定时任务&quot;&gt;&lt;/a&gt;7、Redis 缓存实现-定时任务&lt;/h1&gt;&lt;p&gt;主要内容（后端）：&lt;</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="redis" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring 注解使用</title>
    <link href="http://example.com/2022/12/08/Spring%20%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/12/08/Spring%20%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8/</id>
    <published>2022-12-08T08:06:28.939Z</published>
    <updated>2022-12-08T07:54:01.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-注解使用"><a href="#Spring-注解使用" class="headerlink" title="Spring 注解使用"></a>Spring 注解使用</h1><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p> 该注解有一个prefix属性，通过指定的前缀，绑定配置文件中的配置，该注解可以放在类上，也可以放在方法上 </p><p> <strong>当将该注解作用于方法上时，如果想要有效的绑定配置，那么该方法需要有@Bean注解且所属Class需要有@Configuration注解。</strong> </p><p>application.yml 配置文件的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用参考代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisAddress</span> <span class="operator">=</span> String.format(<span class="string">&quot;redis://%s:%s&quot;</span>, host, port);</span><br><span class="line">        config.useSingleServer().setAddress(redisAddress).setDatabase(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 2. 创建实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redisson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trancational-rollbackFor-x3D-Exception-class"><a href="#Trancational-rollbackFor-x3D-Exception-class" class="headerlink" title="@Trancational(rollbackFor &#x3D; Exception.class)"></a>@Trancational(rollbackFor &#x3D; Exception.class)</h2><p>声明式事务管理，添加位置为<strong>接口实现类、接口实现方法上</strong></p><p>默认配置下， Spring 只有抛出的异常为运行时， unchecked 异常时才会回滚该事务。即抛异常为 RunTimeException 的子类 （Error 也会导致事务回滚），抛出 checked 异常不会导致事务回滚。可通过 rollbackFor 来配置</p><h2 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a>@CrossOrigin</h2><p>解决跨域问题，默认情况下允许在该注解中指定的所有源和 HTTP 方法</p><ul><li><strong>origins</strong>： 允许可访问的域列表</li><li><strong>maxAge</strong>:准备响应前的缓存持续的最大时间（以秒为单位）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &#123;&quot;http://127.0.0.1:5173/&quot;&#125;, allowCredentials = &quot;true&quot;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spring-注解使用&quot;&gt;&lt;a href=&quot;#Spring-注解使用&quot; class=&quot;headerlink&quot; title=&quot;Spring 注解使用&quot;&gt;&lt;/a&gt;Spring 注解使用&lt;/h1&gt;&lt;h2 id=&quot;ConfigurationProperties&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="spring注解" scheme="http://example.com/tags/spring%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Session 共享实现</title>
    <link href="http://example.com/2022/12/08/Session%20%E5%85%B1%E4%BA%AB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/12/08/Session%20%E5%85%B1%E4%BA%AB%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-12-08T08:06:28.937Z</published>
    <updated>2022-12-08T07:52:18.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Session-共享实现"><a href="#Session-共享实现" class="headerlink" title="Session 共享实现"></a>Session 共享实现</h3><h4 id="1-安装-Redis"><a href="#1-安装-Redis" class="headerlink" title="1. 安装 Redis"></a>1. 安装 Redis</h4><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>windows 下载：</p><p>Redis 5.0.14 下载：</p><p>链接：<a href="https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg">https://pan.baidu.com/s/1XcsAIrdeesQAyQU2lE3cOg</a> </p><p>提取码：vkoi </p><p>redis 管理工具 quick redis：<a href="https://quick123.net/">https://quick123.net/</a></p><ol start="2"><li>引入 redis，能够操作 redis：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>在 application.yml 中配置 Redis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring</span><br><span class="line"># redis 配置</span><br><span class="line">  redis:</span><br><span class="line">    port: 6379</span><br><span class="line">    host: localhost</span><br><span class="line">    database: 0</span><br></pre></td></tr></table></figure></li><li><p>引入 spring-session 和 redis 的整合，使得自动将 session 存储到 redis 中：</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.session/spring-session-data-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><pre><code class="xml">  session:    timeout: 86400    store-type: redis</code></pre></li><li><p>修改 spring-session 存储配置 <code>spring.session.store-type</code></p><p>默认是 none，表示存储在单台服务器</p><p>store-type: redis，表示从 redis 读写 session</p></li></ol><p>JWT 的优缺点：<a href="https://zhuanlan.zhihu.com/p/108999941">https://zhuanlan.zhihu.com/p/108999941</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Session-共享实现&quot;&gt;&lt;a href=&quot;#Session-共享实现&quot; class=&quot;headerlink&quot; title=&quot;Session 共享实现&quot;&gt;&lt;/a&gt;Session 共享实现&lt;/h3&gt;&lt;h4 id=&quot;1-安装-Redis&quot;&gt;&lt;a href=&quot;#1-安</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
    <category term="Session" scheme="http://example.com/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Redisson 实现分布式锁</title>
    <link href="http://example.com/2022/12/08/Redisson%20%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81(%E5%85%B7%E4%BD%93)/"/>
    <id>http://example.com/2022/12/08/Redisson%20%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81(%E5%85%B7%E4%BD%93)/</id>
    <published>2022-12-08T08:06:28.935Z</published>
    <updated>2022-12-08T07:50:53.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redisson-实现分布式锁"><a href="#Redisson-实现分布式锁" class="headerlink" title="Redisson 实现分布式锁"></a>Redisson 实现分布式锁</h3><p>Redisson 是一个 Java 操作 Redis 的客户端，<strong>提供了大量的分布式数据集来简化对 Redis 的操作和使用，可以让开发者像使用本地集合一样使用 Redis（继承了和 Java 相同的集合类）</strong></p><p>关键词：Java Redis 客户端，分布式数据结构，实现了很多 Java 里支持的集合</p><h4 id="两种引用方式"><a href="#两种引用方式" class="headerlink" title="两种引用方式"></a>两种引用方式</h4><ol><li>spring boot starter 引入（不推荐，因为版本迭代太快，容易冲突）：<br><a href="https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter">https://github.com/redisson/redisson/tree/master/redisson-spring-boot-starter</a></li><li>直接引入：<a href="https://github.com/redisson/redisson#quick-start">https://github.com/redisson/redisson#quick-start</a></li></ol><p>(1)引入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.17</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>(2)新建 RedissonConfig 配置类,配置地址、端口、创建实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: Redisson 配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mofeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/11/10 23:58</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">redisAddress</span> <span class="operator">=</span> String.format(<span class="string">&quot;redis://%s:%s&quot;</span>, host, port);</span><br><span class="line">        config.useSingleServer().setAddress(redisAddress).setDatabase(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 2. 创建实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redisson</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redisson;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Redisson"><a href="#使用Redisson" class="headerlink" title="使用Redisson"></a>使用Redisson</h4><p>创建分布式列表、Map，新建测试类示例代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//    list 数据存在本地 JVM   内存中</span></span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;list:&quot;</span> + list.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    数据存在 Redis 内存中</span></span><br><span class="line">    RList&lt;Object&gt; rList = redissonClient.getList(<span class="string">&quot;test-list&quot;</span>);</span><br><span class="line">    rList.add(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;RList:&quot;</span> + rList.get(<span class="number">0</span>));</span><br><span class="line">    <span class="comment">//rList.remove(0);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    map</span></span><br><span class="line">    RMap&lt;Object, Object&gt; map = redissonClient.getMap(<span class="string">&quot;test-map&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;yupi&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    map.get(<span class="string">&quot;yupi&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(map.get(<span class="string">&quot;yupi&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分布式锁保证定时任务不重复执行"><a href="#分布式锁保证定时任务不重复执行" class="headerlink" title="分布式锁保证定时任务不重复执行"></a>分布式锁保证定时任务不重复执行</h4><p>实现代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testWatchDog</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;yupao:precachejob:docache:lock&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//只有一个线程获取到锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock(<span class="number">0</span>, -<span class="number">1</span>, TimeUnit.MILLISECONDS))&#123;</span><br><span class="line"><span class="comment">// TODO 实际要执行的方法</span></span><br><span class="line">            dosomething();</span><br><span class="line">            System.out.println(<span class="string">&quot;getLock:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//    只能释放自己的锁</span></span><br><span class="line">        <span class="keyword">if</span>(lock.isHeldByCurrentThread())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;unLock:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>waitTime 设置为 0，只抢一次，抢不到就放弃</li><li>主要释放锁要写在 finally 语句块中，保证最后一定释放锁</li></ol><h4 id="Redisson-看门狗机制"><a href="#Redisson-看门狗机制" class="headerlink" title="Redisson 看门狗机制"></a>Redisson 看门狗机制</h4><p>Redisson 中提供的续期机制</p><p>开一个监听线程，如果方法还没执行完，就帮你重置 Redis 锁的过期时间</p><p><strong>原理：</strong></p><ol><li>监听当前线程，默认过期时间是 30 秒，每 10 秒续期一次（续期到 30 秒）</li><li>如果线程挂掉（注意 debug 模式也会被它当成服务器宕机），则不会续期</li></ol><p>详情参考文档：<a href="https://blog.csdn.net/qq_26222859/article/details/79645203">https://blog.csdn.net/qq_26222859/article/details/79645203</a></p><p>定时任务全部代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.yupi.yupao.model.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.yupi.yupao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 预热缓存任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mofeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/11/10 6:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreCacheJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重点用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; mainUserList = Arrays.asList(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每天执行预热推荐用户 cronTable 在线表达式生成 https://cron.qqe2.com/</span></span><br><span class="line">    <span class="comment">// 前面三个参数： 秒 分 时</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 37 1 * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCacheRecommendUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//获取到 锁对象</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;yupao:precachejob:docache:lock&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//只有一个线程获取到锁</span></span><br><span class="line">            <span class="keyword">if</span>(lock.tryLock(<span class="number">0</span>, -<span class="number">1</span>, TimeUnit.MILLISECONDS))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;getLock:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">                <span class="keyword">for</span> (Long userId : mainUserList) &#123;</span><br><span class="line">                    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">                    Page&lt;User&gt; userPage = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">20</span>), queryWrapper);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> String.format(<span class="string">&quot;yupao:user:recommend:%s&quot;</span>, userId);</span><br><span class="line">                    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">                    <span class="comment">//写缓存</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//指定缓存 30 秒过期</span></span><br><span class="line">                        valueOperations.set(redisKey, userPage, <span class="number">30000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        log.error(<span class="string">&quot;redis set key error&quot;</span>, e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;doCacheRecommendUser error&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//    只能释放自己的锁</span></span><br><span class="line">            <span class="keyword">if</span>(lock.isHeldByCurrentThread())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;unLock:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Redisson-实现分布式锁&quot;&gt;&lt;a href=&quot;#Redisson-实现分布式锁&quot; class=&quot;headerlink&quot; title=&quot;Redisson 实现分布式锁&quot;&gt;&lt;/a&gt;Redisson 实现分布式锁&lt;/h3&gt;&lt;p&gt;Redisson 是一个 Java </summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="分布式" scheme="http://example.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Redis 缓存实现</title>
    <link href="http://example.com/2022/12/08/Redis%20%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2022/12/08/Redis%20%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD%E4%BB%BB%E5%8A%A1/</id>
    <published>2022-12-08T08:06:28.933Z</published>
    <updated>2022-12-08T07:46:53.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-缓存实现"><a href="#Redis-缓存实现" class="headerlink" title="Redis 缓存实现"></a>Redis 缓存实现</h2><p>NoSQL 数据库</p><p>key-value 存储系统（区别于 MYSQL 它存储的是键值对）</p><h3 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h3><p>基本数据结构：</p><ul><li>String 字符串类型：name:”mofeng”</li><li>List 列表：names:[“mofeng”,”dogmofeng”,”lu”]</li><li>Set 集合：names:[“mofeng”,”lu”] (值不能重复)</li><li>Hash 哈希：nameAge:{“mofeng”:1,”dogLu”:2}</li><li>Zset 集合：names[mofeng -9, doglu -12] (适合排行榜)</li></ul><p>高级：</p><ul><li>bloomfilter(布隆过滤器，主要从大量的数据中快速过滤值，比如邮件黑名单拦截)</li><li>geo(计算地理位置)</li><li>hyperloglog(pv&#x2F;uv)</li><li>pub&#x2F;sub(发布订阅，类以消息队列)</li><li>BitMap(1001010101010101010101010101)</li></ul><h3 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h3><p>为了防止写入 Redis 的数据乱码、浪费空间等，可以自定义序列化器，</p><p>新建 RedisTemplateConfig 类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller 层代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主页 推荐用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/recommend&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;User&gt;&gt; <span class="title function_">recommendUsers</span><span class="params">(<span class="type">long</span> pageSize, <span class="type">long</span> pageNum, HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">loginUser</span> <span class="operator">=</span> userService.getLoginUser(request);</span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> String.format(<span class="string">&quot;yupao:user:recommend:%s&quot;</span>, loginUser.getId());</span><br><span class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">    <span class="comment">// 判断是否有缓存，有则直接读缓存</span></span><br><span class="line">    Page&lt;User&gt; userPage = (Page&lt;User&gt;) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">    <span class="keyword">if</span>(userPage != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtils.success(userPage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无缓存，则查询数据库</span></span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    userPage = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize), queryWrapper);</span><br><span class="line">    <span class="comment">//写缓存</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//指定缓存 30 秒过期</span></span><br><span class="line">        valueOperations.set(redisKey, userPage, <span class="number">30000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;redis set key error&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(userPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-Spring-Data-Redis-操作-Redis"><a href="#使用-Spring-Data-Redis-操作-Redis" class="headerlink" title="使用 Spring Data Redis 操作 Redis"></a>使用 Spring Data Redis 操作 Redis</h3><p><strong>Spring Data Redis （推荐）</strong></p><p>地址：<a href="https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis">https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis</a></p><p>Spring Data：通用的数据访问框架，定义了一组 <strong>增删改查</strong>的接口</p><p>还可以操作：mysql、Redis、jpa</p><p>使用方式如下：</p><p>1）引入 Spring Data Redis 依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.6</span><span class="number">.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2）配置 Redis 地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="设计缓存-key"><a href="#设计缓存-key" class="headerlink" title="设计缓存 key"></a>设计缓存 key</h3><p>关键点：不同用户看到的数据不同</p><p>建议格式：</p><p>systemId:moduleld:fuc:options (防止其他系统的冲突)</p><p>比如：yupao:user:recommend:userId</p><p><strong>注意：Redis 内存不能无限增加，一定要设置过期时间！！！</strong></p><h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><p>问题：即使使用了缓存，第一个用户访问还是很慢</p><p>缓存预热的优点：</p><ol><li>解决第一个用户访问很慢，让用户始终快速访问</li><li>在一定程度上保护数据库</li></ol><p>缺点：</p><ol><li>增加开发成本（额外的开发、设计等）</li><li>预热的时机和时间错了，缓存的数据不对或者是未更新的数据</li><li>需要占用额外空间</li></ol><h3 id="怎么缓存预热"><a href="#怎么缓存预热" class="headerlink" title="怎么缓存预热"></a>怎么缓存预热</h3><ol><li>定时任务</li><li>手动触发</li></ol><h3 id="实现缓存预热"><a href="#实现缓存预热" class="headerlink" title="实现缓存预热"></a>实现缓存预热</h3><p>用定时任务，每天刷新所有用户的推荐列表</p><p>注意点：</p><ol><li>缓存预热的意义（新增少、总用户多）</li><li>缓存的空间不能太大，要预留给其他缓存空间</li><li>缓存数据的周期（此处为每天）</li></ol><p><strong>在 main 主类添加注解 @EnableScheduling</strong></p><p>cronTable 在线表达式生成，地址：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前面三个参数： 秒 分 时</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 38 6 * * *&quot;)</span></span><br></pre></td></tr></table></figure><p>新建 PreCacheJob 类实现缓存预热任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.yupi.yupao.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.yupi.yupao.model.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.yupi.yupao.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 预热缓存任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mofeng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DateTime</span>: 2022/11/10 6:03</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreCacheJob</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重点用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; mainUserList = Arrays.asList(<span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每天执行预热推荐用户 cronTable 在线表达式生成 https://cron.qqe2.com/</span></span><br><span class="line">    <span class="comment">// 前面三个参数： 秒 分 时</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 38 6 * * *&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doCacheRecommendUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Long userId : mainUserList) &#123;</span><br><span class="line">            QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">            Page&lt;User&gt; userPage = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>, <span class="number">20</span>), queryWrapper);</span><br><span class="line">            <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> String.format(<span class="string">&quot;yupao:user:recommend:%s&quot;</span>, userId);</span><br><span class="line">            ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate.opsForValue();</span><br><span class="line">            <span class="comment">//写缓存</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//指定缓存 30 秒过期</span></span><br><span class="line">                valueOperations.set(redisKey, userPage, <span class="number">30000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;redis set key error&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis-缓存实现&quot;&gt;&lt;a href=&quot;#Redis-缓存实现&quot; class=&quot;headerlink&quot; title=&quot;Redis 缓存实现&quot;&gt;&lt;/a&gt;Redis 缓存实现&lt;/h2&gt;&lt;p&gt;NoSQL 数据库&lt;/p&gt;
&lt;p&gt;key-value 存储系统（区别于 MY</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="redis" scheme="http://example.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis plus 实现分页</title>
    <link href="http://example.com/2022/12/08/Mybatis%20plus%20%E5%88%86%E9%A1%B5/"/>
    <id>http://example.com/2022/12/08/Mybatis%20plus%20%E5%88%86%E9%A1%B5/</id>
    <published>2022-12-08T08:06:28.930Z</published>
    <updated>2022-12-08T07:43:32.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-plus-分页"><a href="#Mybatis-plus-分页" class="headerlink" title="Mybatis plus 分页"></a>Mybatis plus 分页</h1><p>创建 MyBatisPlusConfig 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.yupi.yupao.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>controller 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/recommend&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BaseResponse&lt;Page&lt;User&gt;&gt; <span class="title function_">recommendUsers</span><span class="params">(<span class="type">long</span> pageSize, <span class="type">long</span> pageNum, HttpServletRequest request)</span> &#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    Page&lt;User&gt; userList = userService.page(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize), queryWrapper);</span><br><span class="line">    <span class="keyword">return</span> ResultUtils.success(userList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">onMounted(async () =&gt;&#123;</span><br><span class="line"><span class="comment">// Optionally the request above could also be done as</span></span><br><span class="line">  <span class="type">const</span> <span class="variable">userListData</span> <span class="operator">=</span> await myAxios.get(<span class="string">&#x27;/user/recommend&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      pageSize: <span class="number">8</span>,</span><br><span class="line">      pageNum: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">      .then(function (response) &#123;</span><br><span class="line">        console.log(<span class="string">&#x27;/user/recommend succeed&#x27;</span>, response);</span><br><span class="line">        Toast.success(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line">        console.log(response.data.data)</span><br><span class="line">        <span class="keyword">return</span> response?.data?.records;</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="keyword">catch</span>(function (error) &#123;</span><br><span class="line">        console.error(<span class="string">&#x27;/user/recommend error&#x27;</span>, error);</span><br><span class="line">        Toast.fail(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(userListData)&#123;</span><br><span class="line">    userListData.forEach(user =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span>(user.tags)&#123;</span><br><span class="line">        user.tags = JSON.parse(user.tags)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    userList.value = userListData</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mybatis-plus-分页&quot;&gt;&lt;a href=&quot;#Mybatis-plus-分页&quot; class=&quot;headerlink&quot; title=&quot;Mybatis plus 分页&quot;&gt;&lt;/a&gt;Mybatis plus 分页&lt;/h1&gt;&lt;p&gt;创建 MyBatisPlusConf</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="Mybatis" scheme="http://example.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>整合 Swagger + Knife4j 接口文档</title>
    <link href="http://example.com/2022/12/08/Java%20%E5%90%8E%E7%AB%AF%E6%95%B4%E5%90%88%20Swagger%20+%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <id>http://example.com/2022/12/08/Java%20%E5%90%8E%E7%AB%AF%E6%95%B4%E5%90%88%20Swagger%20+%20Knife4j%20%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</id>
    <published>2022-12-08T08:06:28.926Z</published>
    <updated>2022-12-08T08:14:52.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-后端整合-Swagger-Knife4j-接口文档"><a href="#Java-后端整合-Swagger-Knife4j-接口文档" class="headerlink" title="Java 后端整合 Swagger + Knife4j 接口文档"></a>Java 后端整合 Swagger + Knife4j 接口文档</h1><p>官方文档： <a href="https://doc.xiaominfo.com/docs/quick-start">https://doc.xiaominfo.com/docs/quick-start</a> </p><p>1.引入依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--引入Knife4j的官方start包,Swagger2基于Springfox2<span class="number">.10</span><span class="number">.5</span>项目--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;!--使用Swagger2--&gt;</span><br><span class="line">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.0</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2.添加配置类，<strong>注意：basePackage 需要填写 controller 的路径</strong></p><p>千万注意：线上环境不要把接口暴露出去！！！可以通过在 SwaggerConfig 配置文件开头加上 <code>@Profile(&#123;&quot;dev&quot;, &quot;test&quot;&#125;)</code> 限定配置仅在部分环境开启</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knife4jConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;dockerBean&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">dockerBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//指定使用Swagger2规范</span></span><br><span class="line">        Docket docket=<span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                <span class="comment">//描述字段支持Markdown语法</span></span><br><span class="line">                .description(<span class="string">&quot;# Knife4j RESTful APIs&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://doc.xiaominfo.com/&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;xiaoymin@foxmail.com&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;用户服务&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.yupi.yupao.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 如果开发者使用的是Knife4j 2.x版本，并且Spring Boot版本高于2.4,那么需要在Spring Boot的yml文件中做如下配置： </p><p>3.在 application.yml 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    mvc:</span><br><span class="line">        pathmatch:</span><br><span class="line">            # 配置策略</span><br><span class="line">            matching-strategy: ant-path-matcher</span><br></pre></td></tr></table></figure><p>4.controller类中备注接口相应的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;首页模块&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;name&quot;,value = &quot;姓名&quot;,required = true)</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;向客人问好&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sayHi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">sayHi</span><span class="params">(<span class="meta">@RequestParam(value = &quot;name&quot;)</span>String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(<span class="string">&quot;Hi:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.访问地址，<strong>注意端口、实际的地址</strong></p><p>端口对应，正常访问<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a></p><p>如果配置类当中有配置路径，则需要加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8888</span></span><br><span class="line">  servlet:</span><br><span class="line">    context-path: /api</span><br></pre></td></tr></table></figure><p>该地址访问：<a href="http://localhost:8888/api/doc.html">http://localhost:8888/api/doc.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java-后端整合-Swagger-Knife4j-接口文档&quot;&gt;&lt;a href=&quot;#Java-后端整合-Swagger-Knife4j-接口文档&quot; class=&quot;headerlink&quot; title=&quot;Java 后端整合 Swagger + Knife4j 接口文档</summary>
      
    
    
    
    <category term="开源组件" scheme="http://example.com/categories/%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>伙伴匹配系统 bug</title>
    <link href="http://example.com/2022/12/08/bug%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://example.com/2022/12/08/bug%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2022-12-08T08:06:28.924Z</published>
    <updated>2022-12-08T07:35:39.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="bug-解决"><a href="#bug-解决" class="headerlink" title="bug 解决"></a>bug 解决</h1><h2 id="前后端分离跨域问题"><a href="#前后端分离跨域问题" class="headerlink" title="前后端分离跨域问题"></a>前后端分离跨域问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &#123;&quot;http://127.0.0.1:5173/&quot;&#125;, allowCredentials = &quot;true&quot;)</span></span><br></pre></td></tr></table></figure><p>或者添加配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfg</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//设置允许跨域的路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//设置允许跨域请求的域名</span></span><br><span class="line">               .allowedOrigins(<span class="string">&quot;http://127.0.0.1:9527&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000&quot;</span>)</span><br><span class="line">                <span class="comment">//是否允许证书 不再默认开启</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">//设置允许的方法</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="跨域请求不支持-cookie-操作"><a href="#跨域请求不支持-cookie-操作" class="headerlink" title="跨域请求不支持 cookie 操作"></a>跨域请求不支持 cookie 操作</h2><p>1.添加依赖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-session-core&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>添加配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yupi.yupao.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.session.DefaultCookieSerializerCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.MapSessionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.SessionRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.config.annotation.web.http.EnableSpringHttpSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.DefaultCookieSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSpringHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SessionRepository <span class="title function_">sessionRepository</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapSessionRepository</span>(<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DefaultCookieSerializerCustomizer <span class="title function_">cookieSerializerCustomizer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultCookieSerializerCustomizer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">customize</span><span class="params">(DefaultCookieSerializer cookieSerializer)</span> &#123;</span><br><span class="line">                cookieSerializer.setSameSite(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">                cookieSerializer.setUseSecureCookie(<span class="literal">true</span>); <span class="comment">// 此项必须，否则set-cookie会被chrome浏览器阻拦</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="加入加密队伍时，密码没正确验证"><a href="#加入加密队伍时，密码没正确验证" class="headerlink" title="加入加密队伍时，密码没正确验证"></a>加入加密队伍时，密码没正确验证</h2><p>修改 TeamServiceimpl 中 JoinTeam（）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> team.getPassword();</span><br><span class="line"><span class="type">String</span> <span class="variable">requestPassword</span> <span class="operator">=</span> teamJoinRequest.getPassword();</span><br><span class="line"><span class="keyword">if</span>(TeamStatusEnum.SECRET.equals(teamStatusEnum))&#123;</span><br><span class="line">    <span class="keyword">if</span>(StringUtils.isBlank(requestPassword) || !requestPassword.equals(team.getPassword()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(ErrorCode.PARAMS_ERROR, <span class="string">&quot;队伍密码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse"></a>JSON.parse</h2><p>&#x3D;&#x3D;SyntaxError: JSON.parse: unexpected character at line 1 colimn 2 of the JSON&#x3D;&#x3D;</p><p>JSON.parse 标准格式为单引号包裹双引号的格式 如 [“男”, “大一”]， 而 &#x3D;&#x3D;[‘南宁’, ‘本地’]&#x3D;&#x3D; 则会报错</p><p>参考地址：<a href="https://www.runoob.com/json/json-parse.html">https://www.runoob.com/json/json-parse.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;bug-解决&quot;&gt;&lt;a href=&quot;#bug-解决&quot; class=&quot;headerlink&quot; title=&quot;bug 解决&quot;&gt;&lt;/a&gt;bug 解决&lt;/h1&gt;&lt;h2 id=&quot;前后端分离跨域问题&quot;&gt;&lt;a href=&quot;#前后端分离跨域问题&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="bug" scheme="http://example.com/tags/bug/"/>
    
    <category term="跨域" scheme="http://example.com/tags/%E8%B7%A8%E5%9F%9F/"/>
    
    <category term="JSON" scheme="http://example.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>匹配算法-优化</title>
    <link href="http://example.com/2022/12/08/12-13%20%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95-%E4%BC%98%E5%8C%96/"/>
    <id>http://example.com/2022/12/08/12-13%20%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95-%E4%BC%98%E5%8C%96/</id>
    <published>2022-12-08T08:06:28.922Z</published>
    <updated>2022-12-08T07:58:14.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="12-13-匹配算法-优化"><a href="#12-13-匹配算法-优化" class="headerlink" title="12-13 匹配算法-优化"></a>12-13 匹配算法-优化</h1><p>主要内容：</p><ol><li>开发完成个人队伍页面、队伍检索等功能（前端、后端）</li><li>开发用户匹配功能（编辑距离算法）</li><li>优化用户匹配功能后端，开发前端用户匹配模式</li><li>优化前端加载效果，使用骨架屏</li><li>优化前端队伍操作权限</li><li>实现前端导航标题动态切换</li><li>优化前端、完善部分功能</li></ol><h2 id="前端不同页面怎么传递数据？"><a href="#前端不同页面怎么传递数据？" class="headerlink" title="前端不同页面怎么传递数据？"></a>前端不同页面怎么传递数据？</h2><ol><li>url querystring (xxx?id&#x3D;1) 比较适用于页面跳转</li><li>url (&#x2F;team&#x2F;:id,xxx&#x2F;1)</li><li>hash (&#x2F;team#1)</li><li>localStorage</li><li>context(全局变量，同页面或整个项目要访问的公共变量)</li></ol><h2 id="随机匹配"><a href="#随机匹配" class="headerlink" title="随机匹配"></a>随机匹配</h2><p>需求背景：为了帮助大家更快地发现和自己兴趣相同的朋友</p><p>思考：匹配一个还是多个？</p><p>答：匹配多个，并且按照匹配的相似度从高到低排序</p><p>思考：怎么匹配？（根据什么来进行匹配？）</p><p>答：根据标签 tags</p><p>还可以根据 user_team 匹配加入相同队伍的用户</p><p>问题本质：找到有相似标签的用户</p><h3 id="1-怎么匹配？"><a href="#1-怎么匹配？" class="headerlink" title="1.怎么匹配？"></a>1.怎么匹配？</h3><ol><li>找到有共同标签最多的用户（Top N）</li><li>共同标签越多，分数越高，月排在前面</li><li>如没有匹配的用户，随机推荐（降级方案）</li></ol><h4 id="两种算法"><a href="#两种算法" class="headerlink" title="两种算法"></a>两种算法</h4><ul><li>编辑距离算法：<a href="https://blog.csdn.net/DBC_121/article/details/104198838">https://blog.csdn.net/DBC_121/article/details/104198838</a></li></ul><p><u>最小编辑距离：字符串 1 通过最少多少次增删改字符的操作可以变成字符串 2</u></p><ul><li>余弦相似度算法（如果需要带权重计算，比如学什么方向最重要，性别相对次要）</li></ul><h3 id="2-怎么对所有用户匹配，去取TOP？"><a href="#2-怎么对所有用户匹配，去取TOP？" class="headerlink" title="2.怎么对所有用户匹配，去取TOP？"></a>2.怎么对所有用户匹配，去取TOP？</h3><p>直接取出所有用户，依次和当前用户计算分数，去 TOP N （54 秒）</p><h4 id="优化方法"><a href="#优化方法" class="headerlink" title="优化方法"></a>优化方法</h4><ol><li>切忌不要在数据量答的时候循环输出日志（取消日志后 20 秒）</li><li>Map 存了所有的分数信息，占用内存<br>解决：维护一个固定长度的有序集合（sortedSet），只保留分数最高的几个用户（时间换空间）</li><li>细节：剔除自己  √</li><li>尽量只查需要的数据：<br>a. 过滤掉标签为空的用户  √<br>b. 根据部分标签取用户（前提是能区分出来哪个标签比较重要）<br>c. 只查需要的数据 （比如 id 和 tags） √ （7 秒）</li><li>提前查？（定时任务）<br>a. 提前给所有用户给缓存（不适用于经常更新的数据）<br>b. 提前运算出来结果，缓存（针对一些重点用户，提前缓存）</li></ol><h4 id="类比大数据推荐机制"><a href="#类比大数据推荐机制" class="headerlink" title="类比大数据推荐机制"></a>类比大数据推荐机制</h4><p>大数据推荐场景：比如说几个亿个商品，难道要查出所有商品？难道要对所有数据计算一遍相似度？</p><p>大数据推荐流程：</p><ul><li>检索 &#x3D;&gt; 召回 &#x3D;&gt; 粗排 &#x3D;&gt; 精排 &#x3D;&gt; 重排序等</li><li>检索：尽可能多地查符合要求的数据（比如按记录查）</li><li>召回：查询可能要用到的数据（不做运算）</li><li>粗排：粗略排序，简单运算（运算相对轻量）</li><li>精排：精细排序，确定固定排位</li></ul><h4 id="分表学习建议"><a href="#分表学习建议" class="headerlink" title="分表学习建议"></a>分表学习建议</h4><ol><li>mycat、 sharding sphere 框架</li><li>一致性 hash 算法</li></ol><h2 id="队伍操作权限控制"><a href="#队伍操作权限控制" class="headerlink" title="队伍操作权限控制"></a>队伍操作权限控制</h2><h3 id="权限整理"><a href="#权限整理" class="headerlink" title="权限整理"></a>权限整理</h3><p>加入队伍：仅非队伍创建人、且未加入队伍的人可见</p><p>更新队伍：仅创建人可见</p><p>解散队伍：仅创建人可见</p><p>退出队伍：创建人不可见，仅加入队伍的人可见</p><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>仅加入队伍和创建队伍的人看到队伍操作按钮（listTeam 接口要能获取我加入的队伍状态）</p><p>方案 1：前端查询我加入了哪些队伍列表，然后判断每个队伍 id 是否在列表中（前端要多发一次请求）</p><p>方案 2：在后端处理（推荐）</p><h2 id="项目优化"><a href="#项目优化" class="headerlink" title="项目优化"></a>项目优化</h2><ol><li><p>前端导航栏【标题】问题<br>解决：使用 router.beforeEach, 根据要跳转页面的 URL 路径匹配 config&#x2F;routes 配置 title 字段</p></li><li><p>强制登录，自动跳转到登录页 </p><p>解决：axios 全局配置响应拦截器、并且添加重定向</p></li><li><p>区别公开和加密队伍；加入有密码的队伍，要指定密码 </p></li><li><p>展示已加入队伍人数 </p></li><li><p>并发时，重复加入队伍的问题<br>解决：加锁、分布式锁</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;12-13-匹配算法-优化&quot;&gt;&lt;a href=&quot;#12-13-匹配算法-优化&quot; class=&quot;headerlink&quot; title=&quot;12-13 匹配算法-优化&quot;&gt;&lt;/a&gt;12-13 匹配算法-优化&lt;/h1&gt;&lt;p&gt;主要内容：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开发完成个人队</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>一次性定时任务</title>
    <link href="http://example.com/2022/12/08/6%E3%80%81%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2022/12/08/6%E3%80%81%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2022-12-08T08:06:28.919Z</published>
    <updated>2022-12-08T07:56:17.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-一次性定时任务"><a href="#6-一次性定时任务" class="headerlink" title="6-一次性定时任务"></a>6-一次性定时任务</h1><p>主要内容：<br>1.主页前端开发（列表组件抽象）<br>2.批量插入数据功能开发+经验分享<br>3.定时任务注解<br>4.测试及优化批量导入功能（涉及性能优化+并发偏程知识）</p><h2 id="开发主页"><a href="#开发主页" class="headerlink" title="开发主页"></a>开发主页</h2><p>直接 list 列表组件实现</p><p>模拟 1000 万个用户， 再去查询</p><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><h3 id="导入数据的方式"><a href="#导入数据的方式" class="headerlink" title="导入数据的方式"></a>导入数据的方式</h3><ol><li>用可视化界面:适合一次性导入、数据量可控</li><li>写程序：for 循环，但是尽量分批进行（可以用接口来控制）。<strong>保证可控、幂等，注意线上环境和测试环境是有区别的</strong></li><li>执行 SQL 语句：适用于小数据量</li></ol><h3 id="编写一次性任务"><a href="#编写一次性任务" class="headerlink" title="编写一次性任务"></a>编写一次性任务</h3><p>for 循环插入数据的特点：</p><ol><li>频繁建立和释放数据库连接（用批量查询解决）</li><li>for 循环是绝对线性的（可以并发提速）</li></ol><p><strong>注意：并发时不要用到非并发类的集合</strong></p><p>获取核心线程数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">AVAILABLE_PROCESSORS</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors() - <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>建立执行器（线程池）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(AVAILABLE_PROCESSORS, <span class="number">1000</span>, <span class="number">10000</span>, TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10000</span>));</span><br></pre></td></tr></table></figure><p>连接池的参数设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CPU 密集型：分配的核心线程数 = CPU - <span class="number">1</span></span><br><span class="line">IO  密集型：分配的核心线程数可以大于 CPU 核数</span><br></pre></td></tr></table></figure><p>建立一个测试类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.yupi.yupao.model.domain.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StopWatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertUsersTest</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CPU 密集型：分配的核心线程数 = CPU - 1</span></span><br><span class="line">    <span class="comment">// IO  密集型：分配的核心线程数可以大于 CPU 核数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">40</span>, <span class="number">1000</span>, <span class="number">10000</span>, TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10000</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doInsertUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INSERT_NUM</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; INSERT_NUM; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;假墨枫&quot;</span>);</span><br><span class="line">            user.setUserAccount(<span class="string">&quot;fuckmofeng&quot;</span>);</span><br><span class="line">            user.setAvatarUrl(<span class="string">&quot;https://636f-codenav-8grj8px727565176-1256524210.tcb.qcloud.la/img/logo.png&quot;</span>);</span><br><span class="line">            user.setGender(<span class="number">0</span>);</span><br><span class="line">            user.setUserPassword(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">            user.setPhone(<span class="string">&quot;18963421945&quot;</span>);</span><br><span class="line">            user.setTags(<span class="string">&quot;[&#x27;男&#x27;,&#x27;java&#x27;]&quot;</span>);</span><br><span class="line">            user.setEmail(<span class="string">&quot;123456@qq.com&quot;</span>);</span><br><span class="line">            user.setUserStatus(<span class="number">0</span>);</span><br><span class="line">            user.setUserRole(<span class="number">0</span>);</span><br><span class="line">            user.setPlanetCode(<span class="string">&quot;112111&quot;</span>);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 20 秒 10 万条</span></span><br><span class="line">        userService.saveBatch(userList, <span class="number">10000</span>);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        System.out.println(stopWatch.getTotalTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并发插入数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CPU 密集型：分配的核心线程数 = CPU - 1</span></span><br><span class="line"><span class="comment">// IO  密集型：分配的核心线程数可以大于 CPU 核数</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">40</span>, <span class="number">1000</span>, <span class="number">10000</span>, TimeUnit.MINUTES, <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">10000</span>));</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并发插入用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doConcurrencyInsertUsers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">StopWatch</span> <span class="variable">stopWatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StopWatch</span>();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INSERT_NUM</span> <span class="operator">=</span> <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分十组</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">batchSize</span> <span class="operator">=</span> <span class="number">5000</span>;</span><br><span class="line">    <span class="comment">//因为CompletableFuture实现了Future接口，我们先来回顾Future吧。</span></span><br><span class="line">    <span class="comment">//Future是Java5新加的一个接口，它提供了一种异步并行计算的功能。如果主线程需要执行一个很耗时的计算任务，我们就可以通过future把这个任务放到异步线程中执行。主线程继续处理其他任务，处理完成后，再通过Future获取计算结果。</span></span><br><span class="line">    List&lt;CompletableFuture&lt;Void&gt;&gt; futureList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;假墨枫&quot;</span>);</span><br><span class="line">            user.setUserAccount(<span class="string">&quot;fuckmofeng&quot;</span>);</span><br><span class="line">            user.setAvatarUrl(<span class="string">&quot;https://636f-codenav-8grj8px727565176-1256524210.tcb.qcloud.la/img/logo.png&quot;</span>);</span><br><span class="line">            user.setGender(<span class="number">0</span>);</span><br><span class="line">            user.setUserPassword(<span class="string">&quot;12345678&quot;</span>);</span><br><span class="line">            user.setPhone(<span class="string">&quot;18963421945&quot;</span>);</span><br><span class="line">            user.setTags(<span class="string">&quot;[&#x27;女&#x27;,&#x27;java&#x27;,&#x27;python&#x27;,&#x27;c++&#x27;]&quot;</span>);</span><br><span class="line">            user.setEmail(<span class="string">&quot;123456@qq.com&quot;</span>);</span><br><span class="line">            user.setUserStatus(<span class="number">0</span>);</span><br><span class="line">            user.setUserRole(<span class="number">0</span>);</span><br><span class="line">            user.setPlanetCode(<span class="string">&quot;112111&quot;</span>);</span><br><span class="line">            userList.add(user);</span><br><span class="line">            <span class="keyword">if</span>(j % batchSize == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新建异步任务,异步执行</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ThreadName:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            userService.saveBatch(userList, batchSize);</span><br><span class="line">        &#125;,executorService);</span><br><span class="line">        futureList.add(future);</span><br><span class="line">    &#125;</span><br><span class="line">    CompletableFuture.allOf(futureList.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[]&#123;&#125;)).join();</span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    System.out.println(stopWatch.getTotalTimeMillis());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;6-一次性定时任务&quot;&gt;&lt;a href=&quot;#6-一次性定时任务&quot; class=&quot;headerlink&quot; title=&quot;6-一次性定时任务&quot;&gt;&lt;/a&gt;6-一次性定时任务&lt;/h1&gt;&lt;p&gt;主要内容：&lt;br&gt;1.主页前端开发（列表组件抽象）&lt;br&gt;2.批量插入数据功能开发+</summary>
      
    
    
    
    <category term="伙伴匹配系统" scheme="http://example.com/categories/%E4%BC%99%E4%BC%B4%E5%8C%B9%E9%85%8D%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="定时任务" scheme="http://example.com/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
</feed>
